buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()
    }
    dependencies {
        classpath "android.arch.navigation:navigation-safe-args-gradle-plugin:$archNavigationVersion"
    }
}

apply plugin: 'com.android.application'
//apply plugin: 'com.google.gms.oss.licenses.plugin' // removed because this now shows more than run-time libraries and potentially has compile issue between 0.9.1 and 0.9.2
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'

// Manifest version information
def buildTime = new Date().getTime()
ext.versionCodeAppName = 'android-template'
ext.minVersionCode = 1000
def appVersionCode = readVersionCode()
def appVersionName = "1.0.0 ($appVersionCode.$System.env.BUILD_NUMBER)"

dependencies {
    // Android
    implementation "com.android.support:appcompat-v7:${supportLibVersion}"
    implementation "com.android.support:recyclerview-v7:${supportLibVersion}"
    implementation "com.android.support:preference-v14:${supportLibVersion}"
    implementation "com.android.support:design:${supportLibVersion}"
    implementation "com.android.support:support-annotations:${supportLibVersion}" // includes support-v4
    implementation "com.android.support:support-v13:${supportLibVersion}" // needed by material dialogs (depending on older version)
    implementation "com.android.support:multidex:$multiDexVersion"
    implementation "com.android.support:multidex-instrumentation:$multiDexVersion"
    implementation "com.google.android.gms:play-services-analytics:${playServicesVersion}"
//    implementation "com.google.android.gms:play-services-oss-licenses:$playServicesVersion"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"
    implementation "androidx.core:core-ktx:$coreKtxVersion"

    // Code
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "me.eugeniomarletti:android-extras-delegates:$delegatesVersion"
    implementation "com.jakewharton.threetenabp:threetenabp:$threeTenABpVersion"
    implementation "com.jakewharton.timber:timber:$timberVersion"

    // UI
    implementation "com.afollestad.material-dialogs:core:$materialDialogsVersion"

    // === Android Architecture Components ===
    implementation "android.arch.lifecycle:extensions:$archLifecycleVersion"
    implementation "android.arch.lifecycle:runtime:$archLifecycleVersion"
    kapt "android.arch.lifecycle:compiler:$archLifecycleVersion"

    // Navigation
    implementation "android.arch.navigation:navigation-fragment-ktx:$archNavigationVersion"
    implementation "android.arch.navigation:navigation-ui-ktx:$archNavigationVersion"

    // WorkManager
    implementation "android.arch.work:work-runtime-ktx:$archWorkVersion"

    // Database
    implementation "android.arch.persistence.room:runtime:$archRoomVersion"
    kapt "android.arch.persistence.room:compiler:$archRoomVersion"

    // Network
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    // JSON Parsing
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    // Dagger 2
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    // Custom SQLite database

    // (for use of SqliteOrgSQLiteOpenHelperFactory in AppModule.kt)
//    implementation "org.dbtools:dbtools-room:$dbtoolsRoomVersion"
//    implementation "org.dbtools:dbtools-room-sqliteorg:$dbtoolsRoomVersion"

//    implementation "org.sqlite.sqliteX:sqlite-android:3.15.2"

//    implementation "org.sqlite:sqlite-android:3.8.9.0-20150415"
//    implementation "net.sqlcipher:sqlcipher-aar:3.1.0.20140823"

    // Test (Integration)
    // Espresso core dependencies
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.android.support.test:runner:$testRunnerVersion"
    androidTestImplementation "com.android.support:support-annotations:$supportLibVersion" // fix dependency conflict warning

    // Espresso contrib dependencies
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "com.android.support.test:rules:$testRunnerVersion"
    androidTestImplementation "com.android.support:appcompat-v7:$supportLibVersion"
    androidTestImplementation "com.android.support:recyclerview-v7:$supportLibVersion"
    androidTestImplementation "com.android.support:design:$supportLibVersion"

    // Test (Unit)
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion" // be sure to add src/test/resources/mockito-extensions (so you don't have to 'open' all of your classes)
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testImplementation "org.threeten:threetenbp:$threeTenBpVersion"
    testImplementation "org.xerial:sqlite-jdbc:$xerialVersion"
    testImplementation "android.arch.persistence.room:testing:$archRoomVersion"
    testImplementation "org.dbtools:dbtools-room-jdbc:$dbtoolsRoomVersion"
    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"
}

kapt {
    javacOptions {
        // Increase the max count of errors from annotation processors. (Default is 100)
        option("-Xmaxerrs", 500)
    }
}

android {
    compileSdkVersion project.compileSdk

    defaultConfig {
        minSdkVersion project.minSdk
        targetSdkVersion project.targetSdk

        versionCode appVersionCode
        versionName appVersionName

        buildConfigField "String", "BUILD_NUMBER", "\"${System.getProperty("BUILD_NUMBER")}\""
        buildConfigField "String", "USER_AGENT_APP_NAME", "\"AndroidTemplate\""
        buildConfigField "String", "ANALYTICS_KEY", "\"${getAnalyticsKey()}\""

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schema".toString()]
            }
        }

        // Espresso
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
        exclude '/META-INF/main.kotlin_module' // todo temp work-around for fix in Kotlin 1.2.50+ (https://youtrack.jetbrains.com/issue/KT-23695)
        exclude 'META-INF/proguard/androidx-annotations.pro' // todo temp workaround for issue with WorkManager 1.0.0-alpha09
    }

    lintOptions {
        abortOnError true
        disable 'InvalidPackage'

        // temp disable Timber (lint checks are not compatible with 3.1.x Gradle plugin)
        //disable "BinaryOperationInTimber", "LogNotTimber", "StringFormatInTimber", "ThrowableNotAtBeginning", "TimberArgCount", "TimberArgTypes", "TimberExceptionLogging", "TimberTagLength"
    }

    // set dummy signing values if not defined in ~/.gradle/gradle.properties
    if (!project.hasProperty('myKeystore')) {
        println "Using dummy signing values"
        project.ext.setProperty('myKeystore', 'dummy')
        project.ext.setProperty('myKeystorePassword', 'dummy')
        project.ext.setProperty('myKeyAlias', 'dummy')
        project.ext.setProperty('myKeyPassword', 'dummy')
    }

    // defined values my* in ~/.gradle/gradle.properties
    signingConfigs {
        prodConfig {
            storeFile file(myKeystore)
            storePassword myKeystorePassword
            keyAlias myKeyAlias
            keyPassword myKeyPassword
        }
    }

    buildTypes {
        debug {
            versionNameSuffix ' DEV'
            applicationIdSuffix '.dev'
            buildConfigField "long", "BUILD_TIME", "0l" // to improve build times, do allow change on every build
        }
        alpha {
            initWith(buildTypes.release)
            versionNameSuffix ' ALPHA'
            applicationIdSuffix '.dev'
            buildConfigField "long", "BUILD_TIME", "${buildTime}l"
            debuggable true
            signingConfig signingConfigs.prodConfig
        }
        beta {
            initWith(buildTypes.release)
            versionNameSuffix ' BETA'
            buildConfigField "long", "BUILD_TIME", "${buildTime}l"
            signingConfig signingConfigs.prodConfig
        }
        release {
            buildConfigField "long", "BUILD_TIME", "${buildTime}l"
            versionNameSuffix ''
            //minifyEnabled true
            //shrinkResources true
            signingConfig signingConfigs.prodConfig
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString()) // Room schemas
    }
}

// ===== TEST TASKS =====

// show JUnit failure reason in console (the following may fail tests run from IDE)
tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
    }
}

// Rename and place "myAnalyticsKey" in global gradle.properties
def getAnalyticsKey() {
    return hasProperty('myAnalyticsKey') ? myAnalyticsKey : ''
}

/**
 * Read the versionCode for a specific app.
 *
 * Be sure to define the following ABOVE defaultConfig {...}:
 * ext.versionCodeAppName = 'my-app'
 * ext.minVersionCode = 100
 *
 * Set versionCode in defaultConfig {...}:
 * versionCode readVersionCode()
 *
 * @param increment Increments the version code (NOTE: This will increment AFTER configuration is executed (after defaultConfig {...}) (next build will have the incremented value)
 * @return current versionCode
 */
def readVersionCode(Boolean increment = false) {
    def versionsFilename = "${versionCodeAppName.toString()}.properties"
    def versionCodesDirname = "${System.getProperty("user.home")}/.app-version-codes"

    // prepare directory
    def versionsDir = new File(versionCodesDirname)
    if (!versionsDir.exists() && !versionsDir.mkdirs()) {
        throw new IllegalStateException("Cannot create versions directory [${versionsDir.absolutePath}]")
    }

    // read existing versions file (create if does not exist)
    def versionPropsFile = new File(versionsDir, versionsFilename)
    Properties versionProps = new Properties()
    if (versionPropsFile.canRead()) {
        def reader = new FileInputStream(versionPropsFile)
        versionProps.load(reader)
        reader.close()
    } else {
        println("Failed to read properties file [${versionPropsFile.absolutePath}]")
        versionProps['VERSION_CODE'] = "$minVersionCode"
    }

    // get the existing version
    def versionCode = versionProps['VERSION_CODE'].toInteger()

    // make sure the version code is GREATER THAN the minVersionCode
    if (versionCode < minVersionCode) {
        versionCode = minVersionCode
    }

    println("Current build will use versionCode [$versionCode]")

    if (increment) {
        // increment version code
        versionCode++

        // write updated version code
        versionProps['VERSION_CODE'] = versionCode.toString()
        def writer = versionPropsFile.newWriter()
        versionProps.store(writer, null)
        writer.close()

        println("Incremented versionCode to [$versionCode]")
    }

    return versionCode
}

task('incrementVersionCode') << {
    readVersionCode(true)
}
