buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.10.1'
        classpath 'org.dbtools:dbtools-gen:2.1.0'
    }
}

apply plugin: 'android'
apply plugin: 'sonar-runner'
apply plugin: 'findbugs'

archivesBaseName = 'android-template'
// Manifest version information
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    // Android
    compile "com.android.support:appcompat-v7:19+" // includes support-v4

    // Code
    provided 'com.google.code.findbugs:annotations:2.0.3' // includes "com.google.code.findbugs:jsr305"
//    provided 'org.checkerframework:checker:1.8.1' // when Android support java8 and jsr 308
    compile 'com.squareup.dagger:dagger:1.2.1'
    provided 'com.squareup.dagger:dagger-compiler:1.2.1'
    compile 'com.jakewharton:butterknife:4.0.1'
    compile 'joda-time:joda-time:2.3'
    compile 'org.dbtools:dbtools-android:2.1.0'

    androidTestCompile('com.jakewharton.espresso:espresso:1.1-r2') {
        exclude group: 'com.squareup.dagger'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}


def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }

//    jacoco {
//        version '0.6.2.201302030002'
//    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
    }

    // defined values my* in ~/.gradle/gradle.properties
//    signingConfigs {
//        prodConfig {
//            storeFile file(myKeystore)
//            storePassword myKeystorePassword
//            keyAlias myKeyAlias
//            keyPassword myKeyPassword
//        }
//    }

    buildTypes {
        debug {
            versionNameSuffix '-DEV'
            // does not work with dagger (https://code.google.com/p/android/issues/detail?id=69174&thanks=69174&ts=1398894143)
//            testCoverageEnabled true
        }
        release {
//            signingConfig signingConfigs.prodConfig;
            versionNameSuffix ''
        }
    }

    // set the build timestamp on the file and in the app
    android.applicationVariants.all { variant ->

        // set the build timestamp
        def timestamp = new Date().format("yyyyMMdd-HHmm", TimeZone.getTimeZone("GMT"));

        // name the file with the version and timestamp (does not work well with the IDE... do not do on debug build)
        if (variant.buildType.name != "debug" && variant.zipAlign) {
            def apk = variant.outputFile;
            def newName = apk.name.replace(".apk", "-" + versionCode + "-" + timestamp + ".apk");
            variant.outputFile = new File(apk.parentFile, newName);
        }
    }
}

sonarRunner {
    sonarProperties {
        if (!project.hasProperty('mySonarHostUrl')) {
            println '!!!! Sonar properties must be set in your gradle.properties !!!!'
            return
        }

        // Project Information
        property 'sonar.projectKey', 'AndroidTemplate'
        property 'sonar.projectName', 'Android Template'

        property 'sonar.links.homepage', 'https://github.com/jeffdcamp/android-template'
        property 'sonar.links.issue', 'https://github.com/jeffdcamp/android-template/issues'
        property 'sonar.links.scm', 'https://github.com/jeffdcamp/android-template.git'

        // Sonar Information (defined in gradle.properties)
        property "sonar.host.url", mySonarHostUrl
        property "sonar.jdbc.url", mySonarJdbcUrl
        property "sonar.jdbc.driverClassName", mySonarJdbcDriver
        property "sonar.jdbc.username", mySonarUsername
        property "sonar.jdbc.password", mySonarPassword


        properties["sonar.sources"] = android.sourceSets.main.java.srcDirs
        properties["sonar.tests"] = android.sourceSets.androidTest.java.srcDirs
        properties["sonar.binaries"] = [file("build/classes/debug"), file("build/classes/alpha")]
    }
}

task dbtools {
    description = 'Generate DBTools domain classes'
    doLast {
        // NOTE: BE Sure to add the following above:
        //    buildscript {
        //        repositories {
        //            mavenCentral()
        //        }
        //        dependencies {
        //            classpath 'org.dbtools:dbtools-gen:2.+'
        //        }
        //    }

        System.out.println("Generating DBTools Classes...")

        org.dbtools.gen.android.AndroidObjectsBuilder builder = new org.dbtools.gen.android.AndroidObjectsBuilder();
        builder.setXmlFilename("src/main/database/schema.xml");
        builder.setOutputBaseDir("src/main/java/org/company/project/domain");
        builder.setPackageBase("org.company.project.domain");
        builder.setInjectionSupport(true);
        builder.setJsr305Support(true);
        builder.setDateTimeSupport(true);
        builder.setEncryptionSupport(false);
        builder.build();
    }
}
